import ${
inputs: menu, stringInput as sInput, numericInput as nInput, matrixInput as mInput
matrix: Matrix as M
fraction: Fraction as F
title: title
scripting.logger: log as print
}$

function ${{}
  title('Matrix Calculator')
  def matrixLabels(matrices):
    return [f'[{chr(i+65)}] {m.dimensions()[0]}x{m.dimensions()[1]}' if m else f'[{chr(i+65)}] (empty)' for i, m in enumerate(matrices)]

  def chooseEnteredMatrix(prompt):
      while True:
        choice = matrices[menu(prompt, matrixLabels(matrices))-1]
        if not choice:
          print('Please select an non-empty matrix.')
        else:
          return choice

  matrices=[None for i in range(10)]
  m=mInput()
  m.showWork()
  matrices[0]=m
  
  while True:
    choice = menu('Operation:', ['Enter/Update a Matrix', 'Find Determinant of a Matrix', 'Gauss-Jordan Elimination', 'Matrix Math', 'Quit Calculator'])
    if choice == 1:
      m=mInput()
      m.showWork()
      matrices[menu('Store in:', matrixLabels(matrices))-1] = m
    elif choice == 2:
      m=chooseEnteredMatrix('Find determinant of:')
      print(f'Determinant of Matrix: {m.determinant()}\n')
    elif choice == 3:
      try:
        chooseEnteredMatrix('Choose matrix to solve:').gaussjordanElimination()
      except Exception as e:
        print(f'ERROR: {e}\n')
    elif choice == 4:
      m1 = chooseEnteredMatrix('Choose matrix to operate on:')
      choice = menu('Select operation to perform:', ['Inverse', 'Scalar Multiplication', 'Matrix Addition', 'Matrix Multiplication'])
      res = None
      if choice == 1:
        res = M.inverse(m1)
      elif choice == 2:
        res = m1.deepCopy().scale(nInput('Enter Fraction Scaler: ', F))
      elif choice == 3:
        res = m1 * chooseEnteredMatrix('Choose matrix to add with:')
      else:
        res = m1 * chooseEnteredMatrix('Choose matrix to multiply with:')
      print(res)
      store = menu('Do you want to store result?', ['Yes', 'No'])
      if store == 1:
        res.showWork()
        matrices[menu('Store in:', matrixLabels(matrices))-1] = res
    else:
      break
}$